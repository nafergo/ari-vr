/**
 * Generated by Verge3D Puzzles v.3.6.1
 * Fri Jun 18 2021 01:07:31 GMT+0100 (WEST)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;
var _webAudioTinySynth = null;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};



PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = true;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["show_activators"] = show_activators;
this.procedures["hide_activators"] = hide_activators;
this.procedures["init fallback controls"] = init_fallback_controls;
this.procedures["init oculus controls"] = init_oculus_controls;

var PROC = {
    "show_activators": show_activators,
    "hide_activators": hide_activators,
    "init fallback controls": init_fallback_controls,
    "init oculus controls": init_oculus_controls,
};

var dirs, velocity_mult, ar_avail, vr_avail, velocity, cam_rot, controller, picked;



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}


// Describe this function...
function show_activators() {
  if (vr_avail) {
    changeVis('VR', true);
  }
  if (ar_avail) {
    changeVis('AR', true);
  }
}

// Describe this function...
function hide_activators() {
  changeVis('VR', false);
  changeVis('AR', false);
}


// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// getEventProperty puzzle
function getEventProperty(prop, event) {
    if (typeof event != "undefined") {
        switch (prop) {
            case 'target.id':
                return event.target.id;
            case 'target.value':
                return event.target.value;
            case 'touches.length':
                return event.touches ? event.touches.length : 0;
            case 'touches[0].pageX':
                return event.touches[0].pageX;
            case 'touches[0].pageY':
                return event.touches[0].pageY;
            case 'touches[1].pageX':
                return event.touches[1].pageX;
            case 'touches[1].pageY':
                return event.touches[1].pageY;
            default:
                return event[prop];
        }
    }
}



// dictSet puzzle
function dictSet(dict, key, value) {
    if (dict && typeof dict == 'object')
        dict[key] = value;
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// getObjDirection puzzle
function getObjDirection(objName, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var dir = obj.getWorldDirection(_pGlob.vec3Tmp);

    var coordSystem = getCoordSystem();
    coordsTransform(dir, 'Y_UP_RIGHT', coordSystem);

    switch (coord) {
    case 'X':
        return dir.x;
    case 'Y':
        return dir.y;
    case 'Z':
        return dir.z;
    case 'XYZ':
        return dir.toArray();
    case 'HORIZONTAL':
        switch (coordSystem) {
        case 'Y_UP_RIGHT':
            dir.y = 0;
            dir.normalize();
            return [dir.x, 0, dir.z];
        default:
            dir.z = 0;
            dir.normalize();
            return [dir.x, dir.y, 0];
        }
    default:
        console.error("get object direction: Wrong coords");
        return;
    }
};



// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



// createVector puzzle
function createVector(x, y, z) {
    return [x, y, z];
};



// vectorMath puzzle
function vectorMath(vec1, operation, vec2) {

    var vec1 = _pGlob.vec3Tmp.fromArray(vec1);
    var vec2 = _pGlob.vec3Tmp2.fromArray(vec2);

    switch (operation) {
    case 'ADD':
        return vec1.add(vec2).toArray();
    case 'SUBTRACT':
        return vec1.sub(vec2).toArray();
    case 'MULTIPLY':
        return vec1.multiply(vec2).toArray();
    case 'DIVIDE':
        return vec1.divide(vec2).toArray();
    case 'DOT':
        return vec1.dot(vec2);
    case 'CROSS':
        return vec1.cross(vec2).toArray();
    case 'ROTATE':
        var euler = _pGlob.eulerTmp;
        vec2.multiplyScalar(Math.PI/180)
        return vec1.applyEuler(euler.setFromVector3(vec2)).toArray();
    default:
        console.error('vector math: Wrong operation');
        return;
    }
};



// setVectorValue puzzle
function setVectorValue(vector, valueName, value) {
    switch (valueName) {
    case 'X':
        vector[0] = value;
        break;
    case 'Y':
        vector[1] = value;
        break;
    case 'Z':
        vector[2] = value;
        break;
    case 'LENGTH':
        _pGlob.vec3Tmp.fromArray(vector).setLength(value).toArray(vector);
        break;
    }
}



// getVectorValue puzzle
function getVectorValue(vector, value) {

    var vector = _pGlob.vec3Tmp.fromArray(vector);

    switch (value) {
    case 'X':
        return vector.x;
    case 'Y':
        return vector.y;
    case 'Z':
        return vector.z;
    case 'IS_ZERO':
        return Boolean(vector.length() <= Number.EPSILON);
    case 'LENGTH':
        return vector.length();
    case 'NEGATED':
        return [-vector.x, -vector.y, -vector.z];
    case 'NORMALIZED':
        return vector.normalize().toArray();
    default:
        console.error('get value from vector: Wrong value');
        return;
    }
};



// physicsApplyVector puzzle
function physicsApplyVector(type, objNames, x, y, z) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    var vec = _pGlob.vec3Tmp.set(x, y, z);

    var noSignChange = (type == 'LINEAR_FACTOR' || type == 'ANGULAR_FACTOR');
    coordsTransform(vec, getCoordSystem(), 'Y_UP_RIGHT', noSignChange);

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        for (var i = 0; i < _pPhysics.syncList.length; i++) {
            var syncData = _pPhysics.syncList[i];

            if (syncData.obj == obj) {

                var btVec = new Ammo.btVector3(vec.x, vec.y, vec.z);

                switch (type) {
                case 'FORCE':
                    syncData.body.applyCentralForce(btVec);
                    break;
                case 'GRAVITY':
                    syncData.body.setGravity(btVec);
                    break;
                case 'LINEAR_VELOCITY':
                    syncData.body.setLinearVelocity(btVec);
                    break;
                case 'ANGULAR_VELOCITY':
                    syncData.body.setAngularVelocity(btVec);
                    break;
                case 'IMPULSE':
                    syncData.body.applyCentralImpulse(btVec);
                    break;
                case 'TORQUE':
                    syncData.body.applyTorque(btVec);
                    break;
                case 'TORQUE_IMPULSE':
                    syncData.body.applyTorqueImpulse(btVec);
                    break;
                case 'LINEAR_FACTOR':
                    syncData.body.setLinearFactor(btVec);
                    break;
                case 'ANGULAR_FACTOR':
                    syncData.body.setAngularFactor(btVec);
                    break;
                case 'POSITION':
                    _pPhysics.transTmp.setIdentity();
                    _pPhysics.transTmp.setOrigin(btVec);

                    var quat = obj.quaternion;
                    _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

                    syncData.body.setWorldTransform(_pPhysics.transTmp);

                    break;
                }

                Ammo.destroy(btVec);
            }
        }

    });


}



// onSimulationTick puzzle
function onSimulationTick(tickType, tickCallback) {

    if (!_pPhysics.tickCallbacks.length) {
        var preTickCb = function(worldPtr, timeStep) {
            _pPhysics.tickCallbacks.forEach(function(pair) {
                if (pair[0] == 'BEFORE')
                    pair[1]();
            });
        }

        var tickCb = function(worldPtr, timeStep) {
            _pPhysics.tickCallbacks.forEach(function(pair) {
                if (pair[0] == 'AFTER')
                    pair[1]();
            });
        }

        _pPhysics.world.setInternalTickCallback(Ammo.addFunction(preTickCb, 'vif'), 0, true);
        _pPhysics.world.setInternalTickCallback(Ammo.addFunction(tickCb, 'vif'), 0, false);
    }

    _pPhysics.tickCallbacks.push([tickType, tickCallback]);

}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(el.objNames, objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objNames, xRay, cbOver, cbOut) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    _pGlob.objHoverInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}



// whenClicked puzzle
function registerOnClick(objNames, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];

    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    // for AR/VR
    _pGlob.objClickInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(objNamesFiltered, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }

        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



/**
 * Find physics body associated with the given object and remove it.
 */
_pPhysics.findRemovePhysicsBody = function(obj) {

    for (var i = 0; i < _pPhysics.syncList.length; i++) {
        var syncData = _pPhysics.syncList[i];

        if (syncData.obj == obj) {

            if (syncData.type == 'SOFT_BODY')
                _pPhysics.world.removeSoftBody(syncData.body);
            else
                _pPhysics.world.removeRigidBody(syncData.body);

            Ammo.destroy(syncData.body);
            _pPhysics.syncList.splice(i, 1);
            i--;
        }
    }
}

/**
 * Find physics constraint associated with the given objects and remove it.
 */
_pPhysics.findRemovePhysicsConstraint = function(obj1, obj2) {

    for (var i = 0; i < _pPhysics.consList.length; i++) {

        var consData = _pPhysics.consList[i];

        if (consData.obj1 == obj1 && consData.obj2 == obj2) {

            _pPhysics.world.removeConstraint(consData.cons);
            Ammo.destroy(consData.cons);
            _pPhysics.consList.splice(i, 1);
            i--;

        }

    }

}

/**
 * Cleanup forces and velocities
 */
_pPhysics.resetBody = function(body) {
    body.clearForces();

    var zeroVec = new Ammo.btVector3(0, 0, 0);

    body.setLinearVelocity(zeroVec);
    body.setAngularVelocity(zeroVec);
}

_pPhysics.setObjToBodyTransform = function(obj, body) {
    var pos = obj.getWorldPosition(_pGlob.vec3Tmp);
    var quat = obj.getWorldQuaternion(_pGlob.quatTmp);

    _pPhysics.transTmp.setIdentity();
    _pPhysics.transTmp.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
    _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

    body.setWorldTransform(_pPhysics.transTmp);
    body.getMotionState().setWorldTransform(_pPhysics.transTmp);
}



// createPhysicsBody puzzle
function createPhysicsBody(type, objNames, shape, mass) {

    if (!window.Ammo)
        return;

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        _pPhysics.findRemovePhysicsBody(obj);

        switch (shape) {
        case 'BOX':
        case 'CAPSULE':
        case 'CONE':
        case 'CYLINDER':

            var box = new v3d.Box3();

            obj.resolveMultiMaterial().forEach(function(objR) {
                if (objR.geometry) {
                    if (objR.geometry.boundingBox == null)
                        objR.geometry.computeBoundingBox();

                    box.union(objR.geometry.boundingBox);
                }
            });

            var size = box.getSize(new v3d.Vector3());

            // do not allow empty-sized shapes
            size.x = size.x || 0.5;
            size.y = size.y || 0.5;
            size.z = size.z || 0.5;

            if (shape == 'BOX') {
                var geometry = new Ammo.btBoxShape(new Ammo.btVector3(
                        size.x * 0.5, size.y * 0.5, size.z * 0.5));
            } else if (shape == 'CAPSULE') {
                var radius = Math.max(size.x, size.z) * 0.5;
                var height = size.y - 2 * radius;
                var geometry = new Ammo.btCapsuleShape(radius, height);
            } else if (shape == 'CONE') {
                var radius = Math.max(size.x, size.z) * 0.5;
                var height = size.y;
                var geometry = new Ammo.btConeShape(radius, height);
            } else {
                var geometry = new Ammo.btCylinderShape(new Ammo.btVector3(
                        size.x * 0.5, size.y * 0.5, size.z * 0.5));
            }

            break;
        case 'SPHERE':

            var sphere = new v3d.Sphere();

            obj.resolveMultiMaterial().forEach(function(objR) {

                if (objR.geometry) {
                    if (objR.geometry.boundingSphere === null)
                        objR.geometry.computeBoundingSphere();

                    sphere.union(objR.geometry.boundingSphere);
                }
            });

            var geometry = new Ammo.btSphereShape(sphere.radius || 0.5);

            break;
        case 'MESH':

            var objsR = obj.resolveMultiMaterial();

            if (!objsR[0].geometry || !objsR[0].isMesh) {
                console.error('create rigid body: incorrect mesh object');
                var geometry = new Ammo.btEmptyShape();
                break;
            }

            // allow complex triangle shapes for KINEMATIC objects
            if (type == 'DYNAMIC' || type == 'GHOST') {

                var geometry = new Ammo.btConvexHullShape();

                objsR.forEach(function(objR) {
                    var positions = objR.geometry.attributes.position.array;

                    for (var i = 0; i < positions.length; i+=3) {
                        var x = positions[i];
                        var y = positions[i+1];
                        var z = positions[i+2];

                        var v = new Ammo.btVector3(x, y, z);

                        geometry.addPoint(v);

                        Ammo.destroy(v);
                    }
                });

            } else {

                var triIdxVertArray = new Ammo.btTriangleMesh();

                objsR.forEach(function(objR) {
                    var positions = objR.geometry.attributes.position.array;
                    var indices = objR.geometry.index.array;

                    for (var i = 0; i < indices.length; i+=3) {

                        var i1 = indices[i];
                        var i2 = indices[i+1];
                        var i3 = indices[i+2];

                        var v1 = new Ammo.btVector3(positions[3*i1], positions[3*i1+1], positions[3*i1+2]);
                        var v2 = new Ammo.btVector3(positions[3*i2], positions[3*i2+1], positions[3*i2+2]);
                        var v3 = new Ammo.btVector3(positions[3*i3], positions[3*i3+1], positions[3*i3+2]);

                        triIdxVertArray.addTriangle(v1, v2, v3, false);

                        Ammo.destroy(v1);
                        Ammo.destroy(v2);
                        Ammo.destroy(v3);
                    }
                });

                var geometry = new Ammo.btBvhTriangleMeshShape(triIdxVertArray, true);

            }

            break;
        case 'EMPTY':
            var geometry = new Ammo.btEmptyShape();
            break;
        }

        var pos = obj.getWorldPosition(_pGlob.vec3Tmp);
        var quat = obj.getWorldQuaternion(_pGlob.quatTmp);

        var transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        var motionState = new Ammo.btDefaultMotionState(transform);

        if (type == 'STATIC' || type == 'KINEMATIC' || type == 'GHOST')
            var bodyMass = 0;
        else
            var bodyMass = mass;

        var localInertia = new Ammo.btVector3(0, 0, 0);
        geometry.calculateLocalInertia(bodyMass, localInertia);

        var rbInfo = new Ammo.btRigidBodyConstructionInfo(bodyMass, motionState, geometry, localInertia);
        var body = new Ammo.btRigidBody(rbInfo);

        // CF_STATIC_OBJECT is set automatically

        if (type == 'KINEMATIC' || type == 'GHOST') {
            body.setCollisionFlags(body.getCollisionFlags() | CF_KINEMATIC_OBJECT);
            body.setActivationState(DISABLE_DEACTIVATION);
        }

        if (type == 'GHOST') {

            body.setCollisionFlags(body.getCollisionFlags() | CF_NO_CONTACT_RESPONSE);
            _pPhysics.world.addRigidBody(body, SensorTrigger, AllFilter);

        } else {

            _pPhysics.world.addRigidBody(body);

        }


        //body.setDamping(0.1, 0.1);

        _pPhysics.syncList.push({
            obj: obj,
            body: body,
            type: type,
            simulated: true,
            mass: mass
        });

        // external physics interface
        if (v3d.PL) {
            v3d.PL.physics.bodies[objName] = body;
        }
    });


}



// physicsBodyApplyParam puzzle
function physicsBodyApplyParam(type, objNames, param) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    if (Array.isArray(param)) {
        var vec = _pGlob.vec3Tmp.fromArray(param);
        var noSignChange = (type == 'LINEAR_FACTOR' || type == 'ANGULAR_FACTOR');
        coordsTransform(vec, getCoordSystem(), 'Y_UP_RIGHT', noSignChange);
    }

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        var btVec;

        for (var i = 0; i < _pPhysics.syncList.length; i++) {
            var syncData = _pPhysics.syncList[i];

            if (syncData.obj == obj) {

                var body = syncData.body;

                if (Array.isArray(param))
                    btVec = new Ammo.btVector3(vec.x, vec.y, vec.z);
                else if (type == 'GRAVITY')
                    btVec = new Ammo.btVector3(0, 0, 0);

                switch (type) {
                case 'ANGULAR_DAMPING':
                    body.setDamping(body.getLinearDamping(), param);
                    break;
                case 'ANGULAR_FACTOR':
                    body.setAngularFactor(btVec);
                    break;
                case 'ANGULAR_VELOCITY':
                    body.setAngularVelocity(btVec);
                    break;
                case 'FORCE':
                    body.applyCentralForce(btVec);
                    break;
                case 'FRICTION':
                    if (syncData.type != 'SOFT_BODY') {
                        body.setFriction(param);
                    } else {
                        var sbConfig = body.get_m_cfg();
                        sbConfig.set_kDF(param);
                    }
                    break;
                case 'GRAVITY':
                    if (Array.isArray(param)) {
                        body.setGravity(btVec);
                    } else {
                        btVec.setY(-param);
                        body.setGravity(btVec);
                    }
                    break;
                case 'IMPULSE':
                    body.applyCentralImpulse(btVec);
                    break;
                case 'LINEAR_DAMPING':
                    if (syncData.type != 'SOFT_BODY') {
                        body.setDamping(param, body.getAngularDamping());
                    } else {
                        var sbConfig = body.get_m_cfg();
                        sbConfig.set_kDP(param);
                    }
                    break;
                case 'LINEAR_FACTOR':
                    body.setLinearFactor(btVec);
                    break;
                case 'LINEAR_VELOCITY':
                    body.setLinearVelocity(btVec);
                    break;
                case 'POSITION':
                    _pPhysics.transTmp.setIdentity();
                    _pPhysics.transTmp.setOrigin(btVec);

                    var quat = obj.quaternion;
                    _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

                    body.setWorldTransform(_pPhysics.transTmp);
                    break;
                case 'RESTITUTION':
                    body.setRestitution(param);
                    break;
                case 'STIFFNESS':
                    if (syncData.type == 'SOFT_BODY') {
                        body.get_m_materials().at(0).set_m_kLST(param);
                        body.get_m_materials().at(0).set_m_kAST(param);
                    } else {
                        console.error('apply body param: Stiffness param is not applicable for rigid bodies');
                    }
                    break;
                case 'TORQUE':
                    body.applyTorque(btVec);
                    break;
                case 'TORQUE_IMPULSE':
                    body.applyTorqueImpulse(btVec);
                    break;
                }

                if (btVec)
                    Ammo.destroy(btVec);
            }
        }

    });


}



// setBodyState puzzle
function setBodyState(newState, objNames) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        for (var i = 0; i < _pPhysics.syncList.length; i++) {
            var syncData = _pPhysics.syncList[i];

            if (syncData.obj == obj) {

                var body = syncData.body;

                switch (newState) {
                case 'ACTIVATE':
                    body.activate();
                    break;
                case 'SLEEP':
                    body.setActivationState(ISLAND_SLEEPING);
                    break;
                case 'ENABLE_SIMULATION':
                    body.setCollisionFlags(body.getCollisionFlags() & ~CF_NO_CONTACT_RESPONSE);
                    body.forceActivationState(ACTIVE_TAG);
                    body.activate();

                    _pPhysics.setObjToBodyTransform(syncData.obj, body);

                    syncData.simulated = true;
                    break;
                case 'DISABLE_SIMULATION':
                    body.setCollisionFlags(body.getCollisionFlags() | CF_NO_CONTACT_RESPONSE);
                    body.forceActivationState(DISABLE_SIMULATION);
                    syncData.simulated = false;
                    break;
                case 'RESET':
                    _pPhysics.resetBody(body);
                    break;
                case 'ENABLE_CONTACT_RESP':
                    body.setCollisionFlags(body.getCollisionFlags() & ~CF_NO_CONTACT_RESPONSE);
                    break;
                case 'DISABLE_CONTACT_RESP':
                    body.setCollisionFlags(body.getCollisionFlags() | CF_NO_CONTACT_RESPONSE);
                    break;
                case 'MAKE_DYNAMIC':
                    body.setCollisionFlags(body.getCollisionFlags() & ~CF_KINEMATIC_OBJECT);
                    body.setCollisionFlags(body.getCollisionFlags() & ~CF_STATIC_OBJECT);

                    var localInertia = new Ammo.btVector3(0, 0, 0);
                    body.getCollisionShape().calculateLocalInertia(syncData.mass, localInertia);
                    body.setMassProps(syncData.mass, localInertia);

                    // enable deactivation
                    body.forceActivationState(ACTIVE_TAG);
                    body.activate();

                    break;
                case 'MAKE_KINEMATIC':
                    body.setCollisionFlags(body.getCollisionFlags() | CF_KINEMATIC_OBJECT);
                    body.setActivationState(DISABLE_DEACTIVATION);
                    break;
                case 'MAKE_STATIC':
                    body.setCollisionFlags(body.getCollisionFlags() | CF_STATIC_OBJECT);
                    break;
                case 'ENABLE_DEACTIVATION':
                    body.forceActivationState(ACTIVE_TAG);
                    break;
                case 'DISABLE_DEACTIVATION':
                    body.setActivationState(DISABLE_DEACTIVATION);
                    break;
                }

                // add / remove

            }

        }

    });
}



// xrControllerProp puzzle
function xrControllerProp(prop) {

    if (_pGlob.xrSessionAcquired) {
        var controller = appInstance.xrControllers[_pGlob.gamepadIndex];
        var inputSource = _pGlob.getInputSource(controller);
    } else {
        var controller = undefined;
        var inputSource = undefined;
    }

    switch (prop) {
    case 'OBJECT':
        if (controller)
            return controller.name;
        else
            return '';

    case 'RAY_RETICLE':
        if (controller && controller.children.length)
            return controller.children[0].name;
        else
            return '';

    case 'HANDEDNESS':
        if (controller && inputSource)
            return inputSource.handedness;
        else
            return '';

    case 'TARGET_RAY_MODE':
        if (controller && inputSource)
            return inputSource.targetRayMode;
        else
            return '';

    case 'PROFILES':
        if (controller && inputSource)
            return inputSource.profiles;
        else
            return [];

    case 'GAMEPAD_INDEX':
        if (controller && inputSource && inputSource.gamepad)
            return _pGlob.gamepadIndex;
        else
            return 0;
    }

}



/**
 * mesh or multi-material object
 */
function isMeshObj(obj) {
    if (obj.isMesh)
        return true;

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        if (child.isMesh && child.isMaterialGeneratedMesh)
            return true;
    }

    return false;
}




function getObjectsFromCollect(obj, type, out) {
    if (!notIgnoredObj(obj))
        return;

    switch (type) {
    case 'ALL':
        if (out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'ANNOTATION':
        if (obj.isAnnotation && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'BONE':
        if (obj.isBone && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'CAMERA':
        if (obj.isCamera && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'EMPTY':
        if (!obj.isAnnotationControl && !obj.isBone && !obj.isCamera && !obj.isGroup &&
                !obj.isLine && !obj.isLOD && !obj.isLight && !isMeshObj(obj) && !obj.isPoints &&
                !obj.isScene && !obj.isSprite && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'LIGHT':
        if (obj.isLight && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'MESH':
        if (isMeshObj(obj) && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    default:
        console.error('getObjectsFrom: Unknown object type: ' + type);
        break;
    }

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        getObjectsFromCollect(child, type, out);
    }
}

// getObjectsFrom puzzle
function getObjectsFrom(objNames, type) {

    var out = [];

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;

        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        getObjectsFromCollect(obj, type, out);
    }

    return out;
}



// distanceBetweenObjects puzzle
function getDistanceBetweenObjects(objName1, objName2) {
    if (!objName1 || !objName2)
        return;
    var obj1 = getObjectByName(objName1);
    var obj2 = getObjectByName(objName2);
    if (!obj1 || !obj2)
        return;
    return obj1.getWorldPosition(_pGlob.vec3Tmp).distanceTo(obj2.getWorldPosition(_pGlob.vec3Tmp2));
}



// makeParent puzzle
function makeParent(objName, targetObjName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    if (targetObjName && targetObjName !== LIST_NONE) {
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj)
            return;
    } else {
        obj.traverseAncestors(function(ancObj) {
            if (ancObj.type == "Scene")
                targetObj = ancObj;
        });
    }
    var matOffset = new v3d.Matrix4();
    matOffset.copy(targetObj.matrixWorld).invert();
    matOffset.multiply(obj.matrixWorld);
    matOffset.decompose(obj.position, obj.quaternion, obj.scale);
    targetObj.add(obj);

    obj.updateMatrixWorld(true);
}



// xrSessionEvent puzzle
function xrSessionEvent(eventType, callback) {

    var eventHandler = function(event) {
        var ctrlObj = event.target;
        // set gamepad index to controller index
        _pGlob.gamepadIndex = appInstance.xrControllers.indexOf(ctrlObj);
        callback(event);
    }

    _pGlob.xrSessionCallbacks.push([eventType, eventHandler]);

    // register controller event here if executed after XR session acquisition
    if (_pGlob.xrSessionAcquired) {
        appInstance.xrControllers.forEach(function(controller) {
            controller.addEventListener(eventType, eventHandler);
        });
    }

}



function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// setObjTransform puzzle
function setObjTransform(objNames, mode, x, y, z, offset) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.Math.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}



_pGlob.getInputSource = function(controller) {
    if (controller && controller.userData.v3d && controller.userData.v3d.inputSource) {
        return controller.userData.v3d.inputSource
    } else {
        return null;
    }
};

_pGlob.traverseNonControllers = function(obj, callback) {

    if (obj.name.startsWith('XR_CONTROLLER_'))
        return;

    callback(obj);

    var children = obj.children;

    for (var i = 0, l = children.length; i < l; i++) {

        _pGlob.traverseNonControllers(children[i], callback);

    }

};

_pGlob.xrGetIntersections = function(controller) {

    controller.updateMatrixWorld(true);

    _pGlob.mat4Tmp.identity().extractRotation(controller.matrixWorld);

    var objList = [];

    _pGlob.traverseNonControllers(appInstance.scene, function(obj) {
        objList.push(obj);
    });

    var raycaster = new v3d.Raycaster();
    raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    raycaster.ray.direction.set(0, 0, -1).applyMatrix4(_pGlob.mat4Tmp);

    return raycaster.intersectObjects(objList);

}

_pGlob.xrOnSelect = function(event) {

    var controller = event.target;

    var intersections = _pGlob.xrGetIntersections(controller);

    if (intersections.length > 0) {
        var intersection = intersections[0];
        var obj = intersection.object;

        // save the object for the pickedObject block
        _pGlob.pickedObject = getPickedObjectName(obj);

        _pGlob.objClickInfo.forEach(function(el) {
            var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
            el.callbacks[isPicked ? 0 : 1]();
        });
    } else {
        _pGlob.objClickInfo.forEach(function(el) {
            // missed
            el.callbacks[1]();
        });
    }

}



// enterARMode puzzle
function enterARMode(refSpace, allowHTML, enterCb, exitCb, unAvailableCb) {

    switch (refSpace) {
        case 'SITTING':
            var referenceSpace = 'local-floor';
            break;
        case 'WALKING':
            var referenceSpace = 'unbounded';
            break;
        case 'ORIGIN':
            var referenceSpace = 'local';
            break;
        case 'ROOM':
            var referenceSpace = 'bounded-floor';
            break;
        case 'VIEWER':
            var referenceSpace = 'viewer';
            break;
        default:
            console.error('puzzles: Wrong VR reference space');
            return;
    }


    appInstance.initWebXR('immersive-ar', referenceSpace, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.addEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.addEventListener(pair[0], pair[1]);
            });
        }

        _pGlob.xrSessionAcquired = true;

        enterCb();

    }, unAvailableCb, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.removeEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.removeEventListener(pair[0], pair[1]);
            });
        }

        _pGlob.xrSessionAcquired = false;

        exitCb();

    }, { domOverlay: allowHTML });
}



// arHitPoint puzzle
function arHitPoint(coord) {

    var hitPoint = coordsTransform(_pGlob.vec3Tmp.copy(_pGlob.arHitPoint), 'Y_UP_RIGHT', getCoordSystem());

    if (coord == 'xyz')
        return hitPoint.toArray();
    else
        return hitPoint[coord];
}



// arHitTest puzzle
function arHitTest(cbHit, cbMiss, smooth) {
    appInstance.renderer.xr.arHitTest(0, 0, function(point) {

        smooth = v3d.Math.clamp(smooth, 0, 1);

        var x = point.x;
        var y = point.y;
        var z = point.z;

        _pGlob.arHitPoint.x = _pGlob.arHitPoint.x * smooth + (1 - smooth) * x;
        _pGlob.arHitPoint.y = _pGlob.arHitPoint.y * smooth + (1 - smooth) * y;
        _pGlob.arHitPoint.z = _pGlob.arHitPoint.z * smooth + (1 - smooth) * z;

        cbHit();
    }, cbMiss);
}



// checkARMode puzzle
function checkARMode(availableCb, unAvailableCb) {
    // COMPAT: < 2.13.1
    if (v3d.Detector.checkWebXR)
        v3d.Detector.checkWebXR('immersive-ar', availableCb, unAvailableCb);
    else
        appInstance.checkWebXR('immersive-ar', availableCb, unAvailableCb);
}



// enterVRMode puzzle
function enterVRMode(refSpace, enterCb, exitCb, unAvailableCb) {

    var DEFAULT_DEPTH = 10;

    var _rayReticleDepth = [];
    var _hoveredObjects = [];

    function onControllerHover() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            var intersections = _pGlob.xrGetIntersections(controller);

            if (intersections.length > 0) {
                var intersection = intersections[0];
                var obj = intersection.object;
                _rayReticleDepth[i] = intersection.distance;
            } else {
                var obj = null;
                _rayReticleDepth[i] = DEFAULT_DEPTH;
            }

            controller.children.forEach(function(child) {
                if (child.name.indexOf('_RAY') > -1) {
                    child.scale.z = _rayReticleDepth[i];
                } else if (child.name.indexOf('_RETICLE') > -1) {
                    // reduces crossing artefacts
                    child.position.z = -0.95 * _rayReticleDepth[i];
                }
            });

            var prevHovered = _hoveredObjects[i];
            var currHovered = obj ? getPickedObjectName(obj) : '';

            if (prevHovered == currHovered) {
                continue;
            }

            // first - all "out" callbacks, then - all "over"
            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(el.objNames, prevHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = prevHovered;
                    el.callbacks[1]();
                }
            });

            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(el.objNames, currHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = currHovered;
                    el.callbacks[0]();
                }
            });

            _hoveredObjects[i] = currHovered;
        }
    }

    switch (refSpace) {
        case 'SITTING':
            var referenceSpace = 'local-floor';
            break;
        case 'WALKING':
            var referenceSpace = 'unbounded';
            break;
        case 'ORIGIN':
            var referenceSpace = 'local';
            break;
        case 'ROOM':
            var referenceSpace = 'bounded-floor';
            break;
        case 'VIEWER':
            var referenceSpace = 'viewer';
            break;
        default:
            console.error('puzzles: Wrong VR reference space');
            return;
    }

    appInstance.initWebXR('immersive-vr', referenceSpace, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            // clicks
            controller.addEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.addEventListener(pair[0], pair[1]);
            });
        }

        // hovers
        if (_pGlob.objHoverInfo.length && appInstance.renderCallbacks.indexOf(onControllerHover) == -1)
            appInstance.renderCallbacks.push(onControllerHover);

        _pGlob.xrSessionAcquired = true;

        enterCb();

    }, unAvailableCb, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.removeEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.removeEventListener(pair[0], pair[1]);
            });
        }

        var cbIdx = appInstance.renderCallbacks.indexOf(onControllerHover);
        if (cbIdx != -1)
            appInstance.renderCallbacks.splice(cbIdx, 1);

        _pGlob.xrSessionAcquired = false;

        exitCb();
    });
}



// checkVRMode puzzle
function checkVRMode(availableCb, unAvailableCb) {
    // COMPAT: < 2.13.1
    if (v3d.Detector.checkWebXR)
        v3d.Detector.checkWebXR('immersive-vr', availableCb, unAvailableCb);
    else
        appInstance.checkWebXR('immersive-vr', availableCb, unAvailableCb);
}



// getGamepadProp puzzle
function getGamepadProp(index, prop, controlIndex) {

    if (_pGlob.xrSessionAcquired) {
        var controller = appInstance.xrControllers[index];

        if (controller && controller.userData.v3d && controller.userData.v3d.inputSource &&
                controller.userData.v3d.inputSource.gamepad)
            var gamepad = controller.userData.v3d.inputSource.gamepad;
        else
            var gamepad = undefined;

    } else {
        var gamepad = navigator.getGamepads()[index];
    }

    switch (prop) {
    case 'AXIS':
        if (gamepad)
            return (gamepad.axes[controlIndex] || 0);
        else
            return 0;

    case 'BUTTON':
        if (gamepad) {
            var button = gamepad.buttons[controlIndex];

            if (button)
                return button.pressed;
            else
                return false;
        } else {
            return false;
        }

    case 'ANALOG_BUTTON':
        if (gamepad) {
            var button = gamepad.buttons[controlIndex];

            if (button)
                return button.value;
            else
                return 0.0;
        } else {
            return 0.0;
        }

    case 'ID':
        if (gamepad)
            return gamepad.id;
        else
            return '';

    case 'CONNECTION_STATUS':
        if (gamepad)
            return gamepad.connected;
        else
            return false;

    case 'TIMESTAMP':
        if (gamepad)
            return gamepad.timestamp;
        else
            return 0.0;

    case 'DEBUG_INFO':
        if (gamepad) {

            var axes = gamepad.axes;
            var axesValues = []

            for (var i = 0; i < axes.length; i++) {
                axesValues.push(Math.round(axes[i] * 1000) / 1000);
            }

            var buttons = gamepad.buttons;
            var btnsPressed = [];
            var btnsValues = [];

            for (var i = 0; i < buttons.length; i++) {
                btnsPressed.push(buttons[i].pressed ? '☑' : '☐');
                btnsValues.push(Math.round(buttons[i].value * 1000) / 1000);
            }

            return 'Index: ' + index + '\n' +
                   'Connected: ' + (gamepad.connected ? 'Yes' : 'No') + '\n' +
                   'ID: ' + (gamepad.id ? gamepad.id : 'N/A') + '\n' +
                   'Axes: ' + String(axesValues) + '\n' +
                   'Buttons: ' + String(btnsPressed) + '\n' +
                   'Analog Buttons: ' + String(btnsValues) + '\n' +
                   'Timestamp: ' + (gamepad.timestamp ? gamepad.timestamp.toFixed(3) : 0);
        } else {
            return 'Gamepad not available';
        }
    }

}


// Describe this function...
function init_fallback_controls() {
  xrSessionEvent('selectstart', function(event) {
    dictSet(dirs, '↑', true);
  });
  xrSessionEvent('selectend', function(event) {
    dictSet(dirs, '↑', false);
  });
  onSimulationTick('BEFORE', function() {
    if (dictGet(dirs, '↑')) {
      velocity = getObjDirection('Camera', 'HORIZONTAL');
      setVectorValue(velocity, 'LENGTH', velocity_mult);
    } else {
      velocity = createVector(0, 0, 0);
    }
    physicsApplyVector('LINEAR_VELOCITY', 'Character', getVectorValue(velocity, 'X'), getVectorValue(velocity, 'Y'), getVectorValue(velocity, 'Z'));
  });
}


// getObjTransform puzzle
function getObjTransform(objName, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);
    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}



// traverseControllers puzzle
function traverseControllers(callback) {
    if (_pGlob.xrSessionAcquired) {
        for (var i = 0; i < appInstance.xrControllers.length; i++) {

            var controller = appInstance.xrControllers[i];
            var inputSource = _pGlob.getInputSource(controller);

            if (controller && inputSource) {
                _pGlob.gamepadIndex = i;
                callback();
            }
        }
    }
}


// Describe this function...
function init_oculus_controls() {
  onSimulationTick('BEFORE', function() {
    traverseControllers(function() {
      if (xrControllerProp('HANDEDNESS') == 'right') {
        velocity = createVector(getGamepadProp(xrControllerProp('GAMEPAD_INDEX'), 'AXIS', '2'), -getGamepadProp(xrControllerProp('GAMEPAD_INDEX'), 'AXIS', '3'), 0);
        cam_rot = createVector(0, 0, getObjTransform('Camera', 'rotation', 'z'));
        velocity = vectorMath(velocity, 'ROTATE', cam_rot);
        setVectorValue(velocity, 'LENGTH', velocity_mult);
        physicsApplyVector('LINEAR_VELOCITY', 'Character', getVectorValue(velocity, 'X'), getVectorValue(velocity, 'Y'), getVectorValue(velocity, 'Z'));
      }
    });
  });
}



// createPhysicsWorld puzzle

// TEMPORARY MEASURE TO PREVENT CRASH [TODO]
if (window.Ammo) {

var CF_STATIC_OBJECT = 1;
var CF_KINEMATIC_OBJECT = 2;
var CF_NO_CONTACT_RESPONSE = 4;

var ACTIVE_TAG = 1;
var ISLAND_SLEEPING = 2;
var DISABLE_DEACTIVATION = 4;
var DISABLE_SIMULATION = 5;

var RO_XYZ = 0;

// collision filter groups
var DefaultFilter = 1;
var StaticFilter = 2;
var KinematicFilter = 4;
var DebrisFilter = 8;
var SensorTrigger = 16;
var CharacterFilter = 32;
var AllFilter = -1;

if (false) {

    _pPhysics.collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration();
    _pPhysics.dispatcher = new Ammo.btCollisionDispatcher(_pPhysics.collisionConfiguration);
    _pPhysics.broadphase = new Ammo.btDbvtBroadphase();
    _pPhysics.solver = new Ammo.btSequentialImpulseConstraintSolver();
    _pPhysics.softBodySolver = new Ammo.btDefaultSoftBodySolver();
    _pPhysics.world = new Ammo.btSoftRigidDynamicsWorld(_pPhysics.dispatcher, _pPhysics.broadphase,
            _pPhysics.solver, _pPhysics.collisionConfiguration, _pPhysics.softBodySolver);
    _pPhysics.world.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, -200, 0));

    _pPhysics.softBodyHelpers = new Ammo.btSoftBodyHelpers();

} else {

    _pPhysics.collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
    _pPhysics.dispatcher = new Ammo.btCollisionDispatcher(_pPhysics.collisionConfiguration);
    _pPhysics.broadphase = new Ammo.btDbvtBroadphase();
    _pPhysics.solver = new Ammo.btSequentialImpulseConstraintSolver();
    _pPhysics.world = new Ammo.btDiscreteDynamicsWorld(_pPhysics.dispatcher, _pPhysics.broadphase,
            _pPhysics.solver, _pPhysics.collisionConfiguration);

}

_pPhysics.world.setGravity( new Ammo.btVector3( 0, -200, 0 ) );
_pPhysics.fps = 120;
_pPhysics.transTmp = new Ammo.btTransform();
_pPhysics.transTmp2 = new Ammo.btTransform();

// external physics interface
if (v3d.PL) {
    v3d.PL.physics = v3d.PL.physics || {};
    v3d.PL.physics.world = _pPhysics.world;
    v3d.PL.physics.bodies = {};
    v3d.PL.physics.constraints = {};
    v3d.PL.physics.addToSyncList = function(obj, body, type) {
        _pPhysics.syncList.push({
            obj: obj,
            body: body,
            type: type,
            simulated: true,
            mass: (body.getInvMass() !==0) ? 1.0/body.getInvMass() : 0
        });
        v3d.PL.physics.bodies[obj.name] = body;
    }
    v3d.PL.physics.removeFromSyncList = function(obj, body) {
        _pPhysics.findRemovePhysicsBody(obj);
        delete v3d.PL.physics.bodies[obj.name];
    }
}

function tick(dt) {

    var DISTANCE_EPSILON = 0.000001;

    if (_pPhysics.collisionData.length) {

        var numManifolds = _pPhysics.world.getDispatcher().getNumManifolds();

        for (var i = 0; i < numManifolds; i++) {
            var contactManifold = _pPhysics.world.getDispatcher().getManifoldByIndexInternal(i);

            var bodyA = Ammo.castObject(contactManifold.getBody0(), Ammo.btRigidBody);
            var bodyB = Ammo.castObject(contactManifold.getBody1(), Ammo.btRigidBody);

            var collDataMatch = null;
            var objsSwapped = false;

            for (var j = 0; j < _pPhysics.collisionData.length; j++) {
                var cd = _pPhysics.collisionData[j];

                if (cd.bodyA == bodyA && cd.bodyB == bodyB) {
                    collDataMatch = cd;
                    break;
                }

                if (cd.bodyA == bodyB && cd.bodyB == bodyA) {
                    collDataMatch = cd;
                    objsSwapped = true;
                    break;
                }
            }

            if (!collDataMatch)
                continue;

            var numContacts = contactManifold.getNumContacts();

            for (var j = 0; j < numContacts; j++) {
                var pt = contactManifold.getContactPoint(j);

                if (pt.getDistance() < DISTANCE_EPSILON) {
                    var ptA = pt.getPositionWorldOnA();
                    var ptB = pt.getPositionWorldOnB();
                    var noB = pt.get_m_normalWorldOnB();

                    _pPhysics.collisionInfo.objectA = collDataMatch.objA ? getPickedObjectName(collDataMatch.objA) : '';
                    _pPhysics.collisionInfo.objectB = collDataMatch.objB ? getPickedObjectName(collDataMatch.objB) : '';

                    _pPhysics.collisionInfo.distance = pt.getDistance();

                    if (!objsSwapped) {
                        _pPhysics.collisionInfo.positionOnA[0] = ptA.x();
                        _pPhysics.collisionInfo.positionOnA[1] = ptA.y();
                        _pPhysics.collisionInfo.positionOnA[2] = ptA.z();

                        _pPhysics.collisionInfo.positionOnB[0] = ptB.x();
                        _pPhysics.collisionInfo.positionOnB[1] = ptB.y();
                        _pPhysics.collisionInfo.positionOnB[2] = ptB.z();

                        _pPhysics.collisionInfo.normalOnB[0] = noB.x();
                        _pPhysics.collisionInfo.normalOnB[1] = noB.y();
                        _pPhysics.collisionInfo.normalOnB[2] = noB.z();
                    } else {
                        _pPhysics.collisionInfo.positionOnA[0] = ptB.x();
                        _pPhysics.collisionInfo.positionOnA[1] = ptB.y();
                        _pPhysics.collisionInfo.positionOnA[2] = ptB.z();

                        _pPhysics.collisionInfo.positionOnB[0] = ptA.x();
                        _pPhysics.collisionInfo.positionOnB[1] = ptA.y();
                        _pPhysics.collisionInfo.positionOnB[2] = ptA.z();

                        _pPhysics.collisionInfo.normalOnB[0] = -noB.x();
                        _pPhysics.collisionInfo.normalOnB[1] = -noB.y();
                        _pPhysics.collisionInfo.normalOnB[2] = -noB.z();
                    }

                    collDataMatch.collideCb();

                    // mark as collided all collision data from the same exec instance
                    for (var k = 0; k < _pPhysics.collisionData.length; k++) {
                        var cd = _pPhysics.collisionData[k];
                        if (cd.execInstanceID == collDataMatch.execInstanceID) {
                            cd.collideFlag = true;
                        }
                    }
                }
            }
        }

        for (var i = 0; i < _pPhysics.collisionData.length; i++) {
            var cd = _pPhysics.collisionData[i];

            if (!cd.collideFlag) {
                _pPhysics.collisionInfo.objectA = '';
                _pPhysics.collisionInfo.objectB = '';

                _pPhysics.collisionInfo.distance = 0;

                _pPhysics.collisionInfo.positionOnA[0] = 0;
                _pPhysics.collisionInfo.positionOnA[1] = 0;
                _pPhysics.collisionInfo.positionOnA[2] = 0;

                _pPhysics.collisionInfo.positionOnB[0] = 0;
                _pPhysics.collisionInfo.positionOnB[1] = 0;
                _pPhysics.collisionInfo.positionOnB[2] = 0;

                _pPhysics.collisionInfo.normalOnB[0] = 0;
                _pPhysics.collisionInfo.normalOnB[1] = 0;
                _pPhysics.collisionInfo.normalOnB[2] = 0;

                cd.noCollideCb();

                // no need to process other collision data from the same exec instance
                for (var j = i+1; j < _pPhysics.collisionData.length; j++) {
                    var cdj = _pPhysics.collisionData[j];
                    if (cdj.execInstanceID == cd.execInstanceID) {
                        cdj.collideFlag = true;
                    }
                }
            }

            cd.collideFlag = false;
        }
    }

    _pPhysics.world.stepSimulation(dt, 10, 1/120);

    // sync physics and graphics

    for (var i = 0; i < _pPhysics.syncList.length; i++) {
        var syncData = _pPhysics.syncList[i];
        if (!syncData.simulated)
            continue;

        var body = syncData.body;

        if (syncData.type == 'SOFT_BODY') {

            var geometry = syncData.obj.geometry;
            var volumePositions = geometry.attributes.position.array;
            var volumeNormals = geometry.ammoNeedNormals ? geometry.attributes.normal.array : null;

            var association = geometry.ammoIndexAssociation;
            var numVerts = association.length;
            var nodes = body.get_m_nodes();

            for (var j = 0; j < numVerts; j++) {

                var node = nodes.at(j);

                var nodePos = node.get_m_x();
                var x = nodePos.x();
                var y = nodePos.y();
                var z = nodePos.z();

                if (volumeNormals) {
                    var nodeNormal = node.get_m_n();
                    var nx = nodeNormal.x();
                    var ny = nodeNormal.y();
                    var nz = nodeNormal.z();
                }

                var assocVertex = association[j];

                for (var k = 0, kl = assocVertex.length; k < kl; k++) {

                    var indexVertex = assocVertex[k];
                    volumePositions[indexVertex] = x;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = nx;

                    indexVertex++;
                    volumePositions[indexVertex] = y;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = ny;

                    indexVertex++;
                    volumePositions[indexVertex] = z;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = nz;

                }

            }

            geometry.attributes.position.needsUpdate = true;
            if (volumeNormals)
                geometry.attributes.normal.needsUpdate = true;

            if (geometry.attributes.previous) {
                v3d.MeshLine.updateAttributes(geometry);
            }

        } else if (!body.isStaticOrKinematicObject()) {
            var ms = body.getMotionState();
            if (ms) {
                ms.getWorldTransform(_pPhysics.transTmp);
                var p = _pPhysics.transTmp.getOrigin();
                var q = _pPhysics.transTmp.getRotation();
                // dynamic objects can't be parented to something
                syncData.obj.position.set(p.x(), p.y(), p.z());
                syncData.obj.quaternion.set(q.x(), q.y(), q.z(), q.w());
            }

        } else if (body.isKinematicObject()) {

            var pos = syncData.obj.getWorldPosition(_pGlob.vec3Tmp);
            var quat = syncData.obj.getWorldQuaternion(_pGlob.quatTmp);

            _pPhysics.transTmp.setIdentity();
            _pPhysics.transTmp.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
            _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

            body.setWorldTransform(_pPhysics.transTmp);

            // needed to calculate interpolated velocity
            body.getMotionState().setWorldTransform(_pPhysics.transTmp);

        }
    }

}

appInstance.renderCallbacks.push(tick);

// END OF TEMPORARY MEASURE TO PREVENT CRASH [TODO]
}


eventHTMLElem('keydown', ['DOCUMENT'], false, function(event) {
  if (getEventProperty('key', event) == 'a') {
    dictSet(dirs, '←', true);
  } else if (getEventProperty('key', event) == 'w') {
    dictSet(dirs, '↑', true);
  } else if (getEventProperty('key', event) == 's') {
    dictSet(dirs, '↓', true);
  } else if (getEventProperty('key', event) == 'd') {
    dictSet(dirs, '→', true);
  }
});
eventHTMLElem('keyup', ['DOCUMENT'], false, function(event) {
  if (getEventProperty('key', event) == 'a') {
    dictSet(dirs, '←', false);
  } else if (getEventProperty('key', event) == 'w') {
    dictSet(dirs, '↑', false);
  } else if (getEventProperty('key', event) == 's') {
    dictSet(dirs, '↓', false);
  } else if (getEventProperty('key', event) == 'd') {
    dictSet(dirs, '→', false);
  }
});
onSimulationTick('BEFORE', function() {
  velocity = getObjDirection('Camera', 'HORIZONTAL');
  if (dictGet(dirs, '↑') && dictGet(dirs, '→')) {
    velocity = vectorMath(velocity, 'ROTATE', createVector(0, 0, -45));
  } else if (dictGet(dirs, '↑') && dictGet(dirs, '←')) {
    velocity = vectorMath(velocity, 'ROTATE', createVector(0, 0, 45));
  } else if (dictGet(dirs, '↓') && dictGet(dirs, '→')) {
    velocity = vectorMath(velocity, 'ROTATE', createVector(0, 0, -135));
  } else if (dictGet(dirs, '↓') && dictGet(dirs, '←')) {
    velocity = vectorMath(velocity, 'ROTATE', createVector(0, 0, 135));
  } else if (dictGet(dirs, '↑')) {
  } else if (dictGet(dirs, '↓')) {
    velocity = vectorMath(velocity, 'ROTATE', createVector(0, 0, 180));
  } else if (dictGet(dirs, '→')) {
    velocity = vectorMath(velocity, 'ROTATE', createVector(0, 0, -90));
  } else if (dictGet(dirs, '←')) {
    velocity = vectorMath(velocity, 'ROTATE', createVector(0, 0, 90));
  } else {
    velocity = createVector(0, 0, 0);
  }
  setVectorValue(velocity, 'LENGTH', velocity_mult);
  physicsApplyVector('LINEAR_VELOCITY', 'Character', getVectorValue(velocity, 'X'), getVectorValue(velocity, 'Y'), getVectorValue(velocity, 'Z'));
});

dirs = {};
velocity_mult = 6;

registerOnHover('1.1', false, function() {
  outline('1.1', 'ENABLE');
}, function() {
  outline('1.1', 'DISABLE');
});
registerOnClick('1.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item11.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('1.2', false, function() {
  outline('1.2', 'ENABLE');
}, function() {
  outline('1.2', 'DISABLE');
});
registerOnClick('1.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item12.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('1.3', false, function() {
  outline('1.3', 'ENABLE');
}, function() {
  outline('1.3', 'DISABLE');
});
registerOnClick('1.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item13.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('1.4.1', false, function() {
  outline('1.4.1', 'ENABLE');
}, function() {
  outline('1.4.1', 'DISABLE');
});
registerOnClick('1.4.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item14.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('1.4.2', false, function() {
  outline('1.4.2', 'ENABLE');
}, function() {
  outline('1.4.2', 'DISABLE');
});
registerOnClick('1.4.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item14.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});

createPhysicsBody('STATIC', 'Base-floor', 'MESH', 0);
createPhysicsBody('STATIC', '2nd-floor', 'MESH', 0);
createPhysicsBody('STATIC', 'stairs', 'MESH', 0);
createPhysicsBody('STATIC', 'walls', 'MESH', 0);
createPhysicsBody('DYNAMIC', 'Character', 'CAPSULE', 1);
physicsBodyApplyParam('ANGULAR_FACTOR', 'Character', createVector(0, 0, 0));
setBodyState('DISABLE_DEACTIVATION', 'Character');
xrSessionEvent('squeezestart', function(event) {
  controller = xrControllerProp('OBJECT');
  var picked_list = getObjectsFrom(['GROUP', 'Pickable'], 'MESH');
  for (var picked_index in picked_list) {
    picked = picked_list[picked_index];
    if (getDistanceBetweenObjects(controller, picked) < 0.2) {
      setBodyState('MAKE_KINEMATIC', picked);
      makeParent(picked, controller);
    }
  }
});
xrSessionEvent('squeezeend', function(event) {
  var picked_list2 = getObjectsFrom(['GROUP', 'Pickable'], 'MESH');
  for (var picked_index2 in picked_list2) {
    picked = picked_list2[picked_index2];
    makeParent(picked, '');
    setBodyState('MAKE_DYNAMIC', picked);
  }
});
makeParent('Camera', 'Head');
setObjTransform('Camera', 'position', 0, 0, 0, false);

checkARMode(function() {
  ar_avail = true;
  registerOnClick('AR', false, false, [0,1,2], function() {
    enterARMode('ORIGIN', false, function() {
      console.log('AR MODE ON');
      hide_activators();
      changeVis('Ground', false);
    }, function() {
      console.log('AR MODE OFF');
      show_activators();
      changeVis('Ground', true);
    }, function() {
      console.log('NO AR!');
    });
    xrSessionEvent('select', function(event) {
      arHitTest(function() {
        setObjTransform('Suzanne', 'position', arHitPoint('x'), arHitPoint('y'), arHitPoint('z'), false);
      }, function() {
        console.log('Move around!');
      }, 0);
    });
  }, function() {});
}, function() {
  ar_avail = false;
  changeVis('AR', false);
});

registerOnHover('4.1.1', false, function() {
  outline('4.1.1', 'ENABLE');
}, function() {
  outline('4.1.1', 'DISABLE');
});
registerOnClick('4.1.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item411.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('4.1.2', false, function() {
  outline('4.1.2', 'ENABLE');
}, function() {
  outline('4.1.2', 'DISABLE');
});
registerOnClick('4.1.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item412.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('4.2.1', false, function() {
  outline('4.2.1', 'ENABLE');
}, function() {
  outline('4.2.1', 'DISABLE');
});
registerOnClick('4.2.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item421.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('4.2.2', false, function() {
  outline('4.2.2', 'ENABLE');
}, function() {
  outline('4.2.2', 'DISABLE');
});
registerOnClick('4.2.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item422.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('4.3', false, function() {
  outline('4.3', 'ENABLE');
}, function() {
  outline('4.3', 'DISABLE');
});
registerOnClick('4.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('console.log(item43);' + '\n' +
  'item43.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});

registerOnHover('6.1', false, function() {
  outline('6.1', 'ENABLE');
}, function() {
  outline('6.1', 'DISABLE');
});
registerOnClick('6.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item61.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.1', false, function() {
  outline('6.2.1', 'ENABLE');
}, function() {
  outline('6.2.1', 'DISABLE');
});
registerOnClick('6.2.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item621.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.2', false, function() {
  outline('6.2.2', 'ENABLE');
}, function() {
  outline('6.2.2', 'DISABLE');
});
registerOnClick('6.2.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item622.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.3', false, function() {
  outline('6.2.3', 'ENABLE');
}, function() {
  outline('6.2.3', 'DISABLE');
});
registerOnClick('6.2.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item623.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.4', false, function() {
  outline('6.2.4', 'ENABLE');
}, function() {
  outline('6.2.4', 'DISABLE');
});
registerOnClick('6.2.4', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item624.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.5', false, function() {
  outline('6.2.5', 'ENABLE');
}, function() {
  outline('6.2.5', 'DISABLE');
});
registerOnClick('6.2.5', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item625.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.6', false, function() {
  outline('6.2.6', 'ENABLE');
}, function() {
  outline('6.2.6', 'DISABLE');
});
registerOnClick('6.2.6', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item626.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.7', false, function() {
  outline('6.2.7', 'ENABLE');
}, function() {
  outline('6.2.7', 'DISABLE');
});
registerOnClick('6.2.7', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item627.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.8', false, function() {
  outline('6.2.8', 'ENABLE');
}, function() {
  outline('6.2.8', 'DISABLE');
});
registerOnClick('6.2.8', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item628.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.9', false, function() {
  outline('6.2.9', 'ENABLE');
}, function() {
  outline('6.2.9', 'DISABLE');
});
registerOnClick('6.2.9', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item629.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.10', false, function() {
  outline('6.2.10', 'ENABLE');
}, function() {
  outline('6.2.10', 'DISABLE');
});
registerOnClick('6.2.10', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item6210.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.11', false, function() {
  outline('6.2.11', 'ENABLE');
}, function() {
  outline('6.2.11', 'DISABLE');
});
registerOnClick('6.2.11', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item6211.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.12', false, function() {
  outline('6.2.12', 'ENABLE');
}, function() {
  outline('6.2.12', 'DISABLE');
});
registerOnClick('6.2.12', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item6212.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.13', false, function() {
  outline('6.2.13', 'ENABLE');
}, function() {
  outline('6.2.13', 'DISABLE');
});
registerOnClick('6.2.13', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item6213.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.14', false, function() {
  outline('6.2.14', 'ENABLE');
}, function() {
  outline('6.2.14', 'DISABLE');
});
registerOnClick('6.2.14', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item6214.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('6.2.15', false, function() {
  outline('6.2.15', 'ENABLE');
}, function() {
  outline('6.2.15', 'DISABLE');
});
registerOnClick('6.2.15', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item6215.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});

registerOnHover('7.1', false, function() {
  outline('7.1', 'ENABLE');
}, function() {
  outline('7.1', 'DISABLE');
});
registerOnClick('7.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item71.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('7.2.1', false, function() {
  outline('7.2.1', 'ENABLE');
}, function() {
  outline('7.2.1', 'DISABLE');
});
registerOnClick('7.2.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item721.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('7.2.2', false, function() {
  outline('7.2.2', 'ENABLE');
}, function() {
  outline('7.2.2', 'DISABLE');
});
registerOnClick('7.2.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item722.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('7.2.3', false, function() {
  outline('7.2.3', 'ENABLE');
}, function() {
  outline('7.2.3', 'DISABLE');
});
registerOnClick('7.2.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item723.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('7.2.4', false, function() {
  outline('7.2.4', 'ENABLE');
}, function() {
  outline('7.2.4', 'DISABLE');
});
registerOnClick('7.2.4', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item724.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('7.2.5', false, function() {
  outline('7.2.5', 'ENABLE');
}, function() {
  outline('7.2.5', 'DISABLE');
});
registerOnClick('7.2.5', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item725.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('7.2.6', false, function() {
  outline('7.2.6', 'ENABLE');
}, function() {
  outline('7.2.6', 'DISABLE');
});
registerOnClick('7.2.6', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item726.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});

checkVRMode(function() {
  vr_avail = true;
  registerOnClick('VR', false, false, [0,1,2], function() {
    enterVRMode('ORIGIN', function() {
      console.log('VR MODE ON');
      hide_activators();
    }, function() {
      console.log('VR MODE OFF');
      show_activators();
    }, function() {
      console.log('NO VR!');
    });
  }, function() {});
}, function() {
  vr_avail = false;
  changeVis('VR', false);
});

xrSessionEvent('connected', function(event) {
  console.log('=== Controller Connected ===');
  if (xrControllerProp('TARGET_RAY_MODE') == 'gaze') {
    console.log('Cardboard: Yes');
    init_fallback_controls();
  } else {
    console.log('Cardboard: No');
    init_oculus_controls();
  }
  console.log('Object: ' + String(xrControllerProp('OBJECT')));
  console.log('Ray/Reticle: ' + String(xrControllerProp('RAY_RETICLE')));
  console.log('Handedness: ' + String(xrControllerProp('HANDEDNESS')));
  console.log('Target Ray Mode: ' + String(xrControllerProp('TARGET_RAY_MODE')));
  console.log('Profiles: ' + String(xrControllerProp('PROFILES')));
  console.log(getGamepadProp(xrControllerProp('GAMEPAD_INDEX'), 'DEBUG_INFO', '0'));
});

registerOnHover('2.1', false, function() {
  outline('2.1', 'ENABLE');
}, function() {
  outline('2.1', 'DISABLE');
});
registerOnClick('2.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item21.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('2.2', false, function() {
  outline('2.2', 'ENABLE');
}, function() {
  outline('2.2', 'DISABLE');
});
registerOnClick('2.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item22.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('2.3', false, function() {
  outline('2.3', 'ENABLE');
}, function() {
  outline('2.3', 'DISABLE');
});
registerOnClick('2.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item23.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('2.4', false, function() {
  outline('2.4', 'ENABLE');
}, function() {
  outline('2.4', 'DISABLE');
});
registerOnClick('2.4', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item24.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('2.5', false, function() {
  outline('2.5', 'ENABLE');
}, function() {
  outline('2.5', 'DISABLE');
});
registerOnClick('2.5', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item25.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});

registerOnHover('5.1.1', false, function() {
  outline('5.1.1', 'ENABLE');
}, function() {
  outline('5.1.1', 'DISABLE');
});
registerOnClick('5.1.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item511.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.1.2', false, function() {
  outline('5.1.2', 'ENABLE');
}, function() {
  outline('5.1.2', 'DISABLE');
});
registerOnClick('5.1.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item512.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.1.3', false, function() {
  outline('5.1.3', 'ENABLE');
}, function() {
  outline('5.1.3', 'DISABLE');
});
registerOnClick('5.1.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item513.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.1.4', false, function() {
  outline('5.1.4', 'ENABLE');
}, function() {
  outline('5.1.4', 'DISABLE');
});
registerOnClick('5.1.4', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item514.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.1.5', false, function() {
  outline('5.1.5', 'ENABLE');
}, function() {
  outline('5.1.5', 'DISABLE');
});
registerOnClick('5.1.5', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item515.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.2.1', false, function() {
  outline('5.2.1', 'ENABLE');
}, function() {
  outline('5.2.1', 'DISABLE');
});
registerOnClick('5.2.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item521.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.2.2', false, function() {
  outline('5.2.2', 'ENABLE');
}, function() {
  outline('5.2.2', 'DISABLE');
});
registerOnClick('5.2.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item522.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.2.3', false, function() {
  outline('5.2.3', 'ENABLE');
}, function() {
  outline('5.2.3', 'DISABLE');
});
registerOnClick('5.2.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item523.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.2.4', false, function() {
  outline('5.2.4', 'ENABLE');
}, function() {
  outline('5.2.4', 'DISABLE');
});
registerOnClick('5.2.4', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item524.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.2.5', false, function() {
  outline('5.2.5', 'ENABLE');
}, function() {
  outline('5.2.5', 'DISABLE');
});
registerOnClick('5.2.5', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item525.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.2.5', false, function() {
  outline('5.2.5', 'ENABLE');
}, function() {
  outline('5.2.5', 'DISABLE');
});
registerOnClick('5.2.5', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item525.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.3.1', false, function() {
  outline('5.3.1', 'ENABLE');
}, function() {
  outline('5.3.1', 'DISABLE');
});
registerOnClick('5.3.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item531.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.3.2', false, function() {
  outline('5.3.2', 'ENABLE');
}, function() {
  outline('5.3.2', 'DISABLE');
});
registerOnClick('5.3.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item532.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('5.3.3', false, function() {
  outline('5.3.3', 'ENABLE');
}, function() {
  outline('5.3.3', 'DISABLE');
});
registerOnClick('5.3.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item533.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});

registerOnHover('7.3', false, function() {
  outline('7.3', 'ENABLE');
}, function() {
  outline('7.3', 'DISABLE');
});
registerOnClick('7.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', 'item73.style.display = "block";')(appInstance, v3d, VARS, PROC);

}, function() {});

registerOnHover('3.1', false, function() {
  outline('3.1', 'ENABLE');
}, function() {
  outline('3.1', 'DISABLE');
});
registerOnClick('3.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item31.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('3.2', false, function() {
  outline('3.2', 'ENABLE');
}, function() {
  outline('3.2', 'DISABLE');
});
registerOnClick('3.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item32.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('3.3', false, function() {
  outline('3.3', 'ENABLE');
}, function() {
  outline('3.3', 'DISABLE');
});
registerOnClick('3.3', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item33.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('3.4', false, function() {
  outline('3.4', 'ENABLE');
}, function() {
  outline('3.4', 'DISABLE');
});
registerOnClick('3.4', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item34.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('3.5.1', false, function() {
  outline('3.5.1', 'ENABLE');
}, function() {
  outline('3.5.1', 'DISABLE');
});
registerOnClick('3.5.1', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item351.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});
registerOnHover('3.5.2', false, function() {
  outline('3.5.2', 'ENABLE');
}, function() {
  outline('3.5.2', 'DISABLE');
});
registerOnClick('3.5.2', false, false, [0,1,2], function() {
  var VARS = Object.defineProperties({}, {
    "dirs": { get: function() { return dirs; }, set: function(val) { dirs = val; } },
    "velocity_mult": { get: function() { return velocity_mult; }, set: function(val) { velocity_mult = val; } },
    "ar_avail": { get: function() { return ar_avail; }, set: function(val) { ar_avail = val; } },
    "vr_avail": { get: function() { return vr_avail; }, set: function(val) { vr_avail = val; } },
    "velocity": { get: function() { return velocity; }, set: function(val) { velocity = val; } },
    "cam_rot": { get: function() { return cam_rot; }, set: function(val) { cam_rot = val; } },
    "controller": { get: function() { return controller; }, set: function(val) { controller = val; } },
    "picked": { get: function() { return picked; }, set: function(val) { picked = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('' + '\n' +
  'item352.style.display = "block";')))(appInstance, v3d, VARS, PROC);

}, function() {});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
